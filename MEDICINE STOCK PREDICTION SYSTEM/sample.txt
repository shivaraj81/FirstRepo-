import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

# Load data
data = pd.read_csv('pharmacy_stock.csv', index_col='Date', parse_dates=True)

# Split data into training and testing sets
train_size = int(len(data) * 0.8)
train, test = data[:train_size], data[train_size:]

# Fit ARIMA model to training data
model = ARIMA(train, order=(2,1,2))
model_fit = model.fit()

# Make predictions for test data
predictions = model_fit.forecast(steps=len(test))[0]

# Evaluate model performance using mean squared error
mse = mean_squared_error(test, predictions)
print('Mean squared error:', mse)

# Make a prediction for a new input (e.g. 'Aspirin')
new_input = 'Aspirin'
new_data = data[data['Medicine']==new_input]['Stock']
forecast = model_fit.forecast(steps=1)[0]
print('Stock level forecast for', new_input, 'is', forecast)







from flask import Flask, render_template, request
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import joblib

app = Flask(__name__)

@app.route("/", methods=["GET", "POST"])
def home():
    if request.method == "POST":
        # get the uploaded file
        uploaded_file = request.files["file"]
        
        # read the file into a dataframe
        data = pd.read_csv(uploaded_file, index_col="Date", parse_dates=True)
        
        # fit the ARIMA model to the data
        model = ARIMA(data, order=(2, 1, 2))
        model_fit = model.fit()
        
        # save the model and data to disk
        joblib.dump(model_fit, "model.pkl")
        joblib.dump(data, "data.pkl")
        
        # render the results page
        return render_template("results.html")
    
    # if the request method is GET, render the home page
    return render_template("home.html")

@app.route("/results", methods=["GET", "POST"])
def results():
    if request.method == "POST":
        # get the medicine name from the form
        medicine = request.form["medicine"]
        
        # load the saved model and data from disk
        model_fit = joblib.load("model.pkl")
        data = joblib.load("data.pkl")
        
        # select the stock data for the specified medicine
        medicine_data = data[data["Medicine"] == medicine]["Stock"]
        
        # make a forecast for the next time step
        forecast = model_fit.forecast(steps=1)[0][0]
        
        # render the results page with the forecast
        return render_template("results.html", medicine=medicine, forecast=forecast)
    
    # if the request method is GET, render the results page without a forecast
    return render_template("results.html")

if __name__ == "__main__":
    app.run(debug=True)










import os
from flask import Flask, render_template, request
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import joblib

app = Flask(__name__)

@app.route("/", methods=["GET", "POST"])
def home():
    if request.method == "POST":
        # get the uploaded file
        uploaded_file = request.files["file"]
        
        # read the file into a dataframe
        data = pd.read_csv(uploaded_file, index_col="Date", parse_dates=True)
        
        # fit the ARIMA model to the data
        model = ARIMA(data, order=(2, 1, 2))
        model_fit = model.fit()
        
        # save the model and data to disk
        model_file = os.path.join(app.instance_path, "model.pkl")
        data_file = os.path.join(app.instance_path, "data.pkl")
        joblib.dump(model_fit, model_file)
        joblib.dump(data, data_file)
        
        # render the results page
        return render_template("results.html")
    
    # if the request method is GET, render the home page
    return render_template("home.html")

@app.route("/results", methods=["GET", "POST"])
def results():
    if request.method == "POST":
        # get the medicine name from the form
        medicine = request.form["medicine"]
        
        # load the saved model and data from disk
        model_file = os.path.join(app.instance_path, "model.pkl")
        data_file = os.path.join(app.instance_path, "data.pkl")
        model_fit = joblib.load(model_file)
        data = joblib.load(data_file)
        
        # select the stock data for the specified medicine
        medicine_data = data[data["Medicine"] == medicine]["Stock"]
        
        # make a forecast for the next time step
        forecast = model_fit.forecast(steps=1)[0][0]
        
        # render the results page with the forecast
        return render_template("results.html", medicine=medicine, forecast=forecast)
    
    # if the request method is GET, render the results page without a forecast
    return render_template("results.html")

if __name__ == "__main__":
    app.run(debug=True)
